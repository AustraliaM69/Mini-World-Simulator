import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

public class WorldSimApp {
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new SimFrame(50, 50, 20));
    }
}

class SimFrame extends JFrame {
    private final World world;
    private final Timer timer;

    public SimFrame(int width, int height, int tileSize) {
        setTitle("World Sim");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setResizable(false);

        world = new World(width, height);
        WorldPanel panel = new WorldPanel(world, tileSize);
        add(panel);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);

        timer = new Timer(300, e -> {
            world.tick();
            panel.repaint();
        });
        timer.start();
    }
}

class WorldPanel extends JPanel {
    private final World world;
    private final int tileSize;

    public WorldPanel(World world, int tileSize) {
        this.world = world;
        this.tileSize = tileSize;
        setPreferredSize(new Dimension(world.width * tileSize, world.height * tileSize));
    }

    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        for (int y = 0; y < world.height; y++) {
            for (int x = 0; x < world.width; x++) {
                Tile tile = world.tiles[x][y];
                g.setColor(tile.getColor());
                g.fillRect(x * tileSize, y * tileSize, tileSize, tileSize);
            }
        }
        for (Character c : world.characters) {
            g.setColor(Color.RED);
            g.fillOval(c.x * tileSize + tileSize/4, c.y * tileSize + tileSize/4, tileSize/2, tileSize/2);
        }
    }
}

class World {
    int width, height;
    Tile[][] tiles;
    List<Character> characters;
    Random random = new Random();

    public World(int width, int height) {
        this.width = width;
        this.height = height;
        tiles = new Tile[width][height];
        characters = new ArrayList<>();

        generateTiles();
        spawnCharacters(10);
    }

    private void generateTiles() {
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                double r = random.nextDouble();
                if (r < 0.1) tiles[x][y] = new Tile("water");
                else if (r < 0.2) tiles[x][y] = new Tile("mountain");
                else tiles[x][y] = new Tile("grass");
            }
        }
    }

    private void spawnCharacters(int count) {
        for (int i = 0; i < count; i++) {
            int x = random.nextInt(width);
            int y = random.nextInt(height);
            characters.add(new Character("Char" + i, x, y));
        }
        // Initialize relationships
        for (Character c : characters) {
            for (Character other : characters) {
                if (c != other) c.relationships.put(other, 0);
            }
        }
    }

    public void tick() {
        // Move characters
        for (Character c : characters) {
            c.moveRandom(width, height);
        }
        // Check for meetings and update relationships
        for (Character c1 : characters) {
            for (Character c2 : characters) {
                if (c1 != c2 && c1.x == c2.x && c1.y == c2.y) {
                    int rel = c1.relationships.getOrDefault(c2, 0);
                    c1.relationships.put(c2, rel + 1);
                }
            }
        }
    }
}

class Tile {
    String type;
    public Tile(String type) {
        this.type = type;
    }
    public Color getColor() {
        return switch (type) {
            case "grass" -> Color.GREEN;
            case "water" -> Color.CYAN;
            case "mountain" -> Color.GRAY;
            default -> Color.BLACK;
        };
    }
}

class Character {
    String name;
    int x, y;
    String gender;
    Random random = new Random();
    Map<Character, Integer> relationships = new HashMap<>();

    public Character(String name, int x, int y) {
        this.name = name;
        this.x = x;
        this.y = y;
        this.gender = random.nextBoolean() ? "Male" : "Female";
    }

    public void moveRandom(int maxX, int maxY) {
        int dx = random.nextInt(3) - 1;
        int dy = random.nextInt(3) - 1;
        x = Math.max(0, Math.min(maxX - 1, x + dx));
        y = Math.max(0, Math.min(maxY - 1, y + dy));
    }
}